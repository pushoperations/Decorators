{"name":"Decorators","tagline":"A library to decorate arrays (especially Laravel's Input::) for manipulation and object construction.","body":"# Decorators (Name May Change)\r\n\r\n[![Build Status](https://img.shields.io/travis/pushoperations/Decorators.svg)](https://travis-ci.org/pushoperations/Decorators)\r\n[![Coverage Status](https://img.shields.io/coveralls/pushoperations/Decorators.svg)](https://coveralls.io/r/pushoperations/Decorators)\r\n[![Scrutinizer Code Quality](https://img.shields.io/scrutinizer/g/pushoperations/Decorators.svg)](https://scrutinizer-ci.com/g/pushoperations/Decorators/?branch=master)\r\n\r\n[![Total Downloads](https://poser.pugx.org/pushoperations/decorators/downloads.svg)](https://packagist.org/packages/pushoperations/Decorators)\r\n[![Latest Stable Version](https://poser.pugx.org/pushoperations/decorators/v/stable.svg)](https://packagist.org/packages/pushoperations/Decorators)\r\n[![Latest Unstable Version](https://poser.pugx.org/pushoperations/decorators/v/unstable.svg)](https://packagist.org/packages/pushoperations/Decorators)\r\n[![License](https://poser.pugx.org/pushoperations/decorators/license.svg)](https://packagist.org/packages/pushoperations/Decorators)\r\n\r\n<!--[![SensioLabsInsight](https://insight.sensiolabs.com/projects/3ab73b7b-5159-4bfe-8c85-2a15d03f9579/big.png)](https://insight.sensiolabs.com/projects/3ab73b7b-5159-4bfe-8c85-2a15d03f9579)-->\r\n\r\nA library to decorate arrays (especially Laravel's Input::) for manipulation and usage as a service to return data for object construction.\r\n\r\nNote: *this library may contain other patterns in the future*.\r\n\r\n## Contents\r\n\r\n- [Installation](#install)\r\n- [Usage](#usage)\r\n- [Examples](#examples)\r\n- [API documentation](http://pushoperations.github.io/Decorators/)\r\n\r\n## Install\r\n\r\nThe recommended way to install is through [Composer](http://getcomposer.org).\r\n\r\nUpdate your project's composer.json file to include Decorators:\r\n\r\n```json\r\n{\r\n    \"require\": {\r\n        \"pushoperations/decorators\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nThen update the project dependencies to include this library:\r\n\r\n```bash\r\ncomposer update pushoperations/decorators\r\n```\r\n\r\nAfter installing, you need to require Composer's autoloader:\r\n\r\n```php\r\nrequire 'vendor/autoload.php';\r\n```\r\n\r\n## Usage\r\n\r\nCreate your own decorator by:\r\n- Extending from the `DataDecorator` abstract class\r\n- Creating a constructor that accepts an array\r\n- Optional: add methods that are specific to generating the array of data you need\r\n\r\nOne use case is to split input data into different arrays for different factories to use for the construction of new objects.\r\n\r\nA handy effect is that you can perform sanitization within the decorator's methods before returning the data array.\r\n\r\n## Examples\r\n\r\n```php\r\nuse Decorators\\DataDecorator;\r\nuse Decorators\\DataDecoratorInterface;\r\n\r\nclass BasicDecorator extends DataDecorator implements DataDecoratorInterface\r\n{\r\n    public function __construct(array $input)\r\n    {\r\n        $this->data = $input;\r\n    }\r\n}\r\n\r\nclass ComplexDecorator extends DataDecorator implements DataDecoratorInterface\r\n{\r\n    public function __construct(array $input)\r\n    {\r\n        $this->data = $input;\r\n    }\r\n\r\n    public function complicate()\r\n    {\r\n        return array_map($this->data, function($value) {\r\n            if (is_int($value)) {\r\n                return $value * 2;\r\n            }\r\n        });\r\n    }\r\n}\r\n```\r\n\r\nCommon usage would be to filter and pick apart the user input for create/update:\r\n\r\n```php\r\n$input = [\r\n    'name' => 'Push Operations',\r\n    'desks' => 50,\r\n    'employees' => [\r\n        'John', 'Jane',\r\n    ],\r\n];\r\n\r\n$basic = new BasicDecorator($input);\r\n\r\n// Check if value for key exists\r\necho $basic->has('desks');                      // true\r\necho $basic->has('chairs');                     // false\r\n\r\n// Provide a default value if it doesn't exist\r\necho $basic->get('name');                       // 'Push Operations'\r\necho $basic->get('chairs', 10);                 // 10\r\n\r\n// Get some of the data\r\nvar_dump($basic->only('name', 'desks'));        // ['name' => 'Push Operations', 'desks' => 50]\r\nvar_dump($basic->only(['name', 'desks']));      // ['name' => 'Push Operations', 'desks' => 50]\r\nvar_dump($basic->except('name'));               // ['desks' => 50, 'employees' => ['John', 'Jane']]\r\n\r\n// Get all of the data\r\nvar_dump($basic->all());                        // The $input array\r\n\r\n// Add data\r\n$add = [\r\n    'interns' => [\r\n        'Billy', 'Derrick'\r\n    ],\r\n];\r\n$basic->merge($add);\r\nvar_dump($basic->get('interns'));               // ['Billy', 'Derrick']\r\n\r\n// You can redecorate the results of the decorator (with itself or another decorator) to do more manipulation.\r\n\r\n$complex = new ComplexDecorator($basic->all());\r\nvar_dump($complex->complicate());               // [..., 'desks' => 100, ...];\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}